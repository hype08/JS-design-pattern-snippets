{
	"Factory that creates instances": {
		"prefix": "factory",
		"body": [
			"function $1($2) {",
			"  this.$2 = $2;",
			"  this.$5 = function () {",
			"    console.log($2);",
			"  };",
			"}",
			"",
			"function $1Factory() {",
			"  this.create = function ($2) {",
			"    return new $1($2);",
			"  };",
			"}",
			"",
			"(() => {",
			"  const $3 = []; // array of $1",
			"  const $4 = new $1Factory(); // new $1Factory instance",
			"",
			"  $3.push($4.create(\"$6\"));",
			"  $3.push($4.create(\"$7\"));",
			"",
			"  for (let i = 0, len = $3.length; i < len; i++) {",
			"    $3[i].$5();",
			"  }",
			"",
			"  return $3;",
			"})();",
			""
		],
		"description": "Factory that creates instances"
	},
	"Builder that steps through instance assembly": {
		"prefix": "builder",
		"body": [
			"function $1() { // director",
			"  this.construct = function (builder) {",
			"    builder.step1();",
			"    builder.step2();",
			"    return builder.get();",
			"  }",
			"}",
			"",
			"function $2Builder() { // concretebuilder",
			"  this.$3 = null;",
			"",
			"  this.step1 = function () {",
			"    this.$3 = new $2();",
			"  };",
			"",
			"  this.step2 = function () {",
			"    this.$3.$4(); // method",
			"  };",
			"",
			"  this.get = function () {",
			"    return this.$3;",
			"  };",
			"}",
			"",
			"function $2() {",
			"  this.$5 = null; // initial property",
			"",
			"  this.$4 = function () {",
			"    this.$5 = $6;",
			"  };",
			"",
			"  this.$7 = function () {",
			"    return \"I am a \" + this.$5 + \"-$5 $3\";",
			"  };",
			"}",
			"",
			"(() => {",
			"  const shop = new $1();",
			"  const $3Builder = new $2Builder();",
			"  const $3 = shop.construct($3Builder);",
			"",
			"  console.log($3.$7());",
			"})();"
		],
		"description": "Builder that steps through assembly of instances"
	}
}